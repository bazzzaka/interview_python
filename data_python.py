
data_literal_constant = {
    'Літеральні константи': '''Прикладом літеральної константи'
                            'може бути число, наприклад,'
                            '5, 1.23, 9.25е-3, або щось по типу'
                            'Це рядок' або "It`s a string". 
                            Вони називаються літеральними, 
                            тому що вони "буквальні" - ви 
                            використовуєте їх значення буквально.
                            Число 2 завжди представляє саме себе
                            і нічого іншого - це "константа",
                            тому що її значення неможливо змінити.
                            Тому це і називається літеральними константами.'''
}

data_type_data_in_python = {
    'Числа': {
        'Цілі числа (int)': '''Прикладом може слугувати число 2 ''',

        'Десяткові числа (float)': '''Прикладами десяткових чисел 
                           можуть бути 3.23 або 52.3Е-4. 
                           Позначення Е показує ступінь числа 10 
                           В даному випадку 52.3Е-4 означає
                           52.3*10 в -4 ступені ''',

        'Комплексні': '''Приклади комплексних чисел: 
                      '(-5+4j) та (2.3 - 4.6j)'''
    },
    'Рядки (текст/str)': '''Рядок (текст/string) - це послідовність 
                     символів. Частіше за все, рядки - це 
                     просто деякий набір слів. 
                     Слова можуть бути як на англійській мові, 
                     так і на будь якій іншій мові 
                     який підтримує стандарт Unicode', 
                     що означає, майже на будь якій 
                    мові світу. String незмінний тип даних.'''
}

data_string_syntax = {
    'Робота з текстом (рядками)': {
        'Одинарні лапки': '''Текст (або рядки), можна вказати 
            використовуючи одинарні лапки, наприклад: 
            'Текст в лапках'. Всі пробіли та знаки табуляції зберігаються як є.''',

        'Подвійні лапки': ''' Подвійні лапки працюють так само як і одинарні, 
            наприклад, "Як тебе звати?". ''',

        'Потрійні лапки': ''' Можна вказувати великий текст/рядки з 
            використанням потрійних лапок (""" або \'''). В межах потрійних лапок
            можливо вільно використовувати одинарні чи подвійні лапки.'''
    }
}

data_string_methods = {
    'Методи рядків(str)': {
        # need add pic for example
        'format()': '''Іноді потрібно скласти текст на основі деяких даних.  
        В рядок можуть бути включен визначені позначення, а пісдя може бути викликаний метод format()
         для заміщення цих позначень відповідними аргументами.'''
    }
}

data_variable = {
    'Змінні (variable)': ''' Слово "змінні" говорить само за себе - 
      їх значення може змінюватись, а це означає, що ви можете зберігати в змінній все що завгодно. 
       Змінна - це область пам'яті комп'ютера, в яких ви збергаєте певну інформацію. У відміну від констант, 
        до такої інформації потрібно якимсь чином отримувати доступ. Тому змінним даються імена.\n\n
        Змінні використовуються простим призначенням їм значень. Ніякого попереднього оголошення 
         чи визначення типу данних не потребується та не використовється.''',
    'Імена ідентифікаторів': ''' Ідентифікатори це імена, присвоєні чому небудь для його позначення.\n
       При віборі імен потрібно дотримуватись наступних правил: \n\n
       --> Першим символом ідентифікатора повинна бути буква алфавіта
       (символ ASCII в верхньому або нижньому регістрі, або Unicode),
         а також символ підкреслення("_")\n
       --> Інша частина ідентифікатора може скадатись із букв, підкреслення або цифр\n
       --> Імена ідентифікаторів чутливі до регістру. Наприклад myname та myName - це
        не одне й теж саме.\n
       --> Приклади допутимих імен ідентифікаторів: i, __my_name, name23, та_будь_які_символи_utf8_δξѪђёўЩӆΞέά\n
       --> Приклади не допустимих імен ідентифікаторів: 2things, тут є пробіли, my-name, >a1b2_c3 и "це_в_лапках"
       
         '''
}

data_objects = {
    'Об\'єкти': ''' Python розглядає все що є в программі, як об'єкти. Мається на увазі у загальному сенсі. 
     Замість то щоб говорити "щось", ми говоримо "об'єкт". Python суворо об'єктно орієнтовний в тому сенсі,
         що об'єтом являється все, включаючи числа, рядки(текст) та функції. '''
}

data_logic_and_physical_string = {
    'Фізичний рядок (string)': ''' Фізичний рядок (string) - це те, що ви бачите, коли набираєте програму. 
      Python неявно передбачає, що кожному фізичному рядку відповідає логічний рядок.''',
    'Логічний рядок (string)': ''' Логічний рядок (string) - це те, що Python бачить як 
    єдиний додаток (application). Python неявно передбачає, що кожному фізичному рядку відповідає логічний рядок.'''
}

data_ident = {
    'Відступ': ''' В Python важливі пробіли на початку рядка. Це називається відступом. Передні відступи 
      (пробіли та табуляції) на початку логічного рядка використовуються для визначення рівня відступу 
      логічного рядка, який в свою чергу, використовується для групування додатків (applications).
       Це говорить про те що строки коду повинні мати однаковий відступ. Кожен набір такого коду
       називається блоком.'''
}
