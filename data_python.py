
data_literal_constant = {
    'Літеральні константи': '''Прикладом літеральної константи'
                            'може бути число, наприклад,'
                            '5, 1.23, 9.25е-3, або щось по типу'
                            'Це рядок' або "It`s a string". 
                            Вони називаються літеральними, 
                            тому що вони "буквальні" - ви 
                            використовуєте їх значення буквально.
                            Число 2 завжди представляє саме себе
                            і нічого іншого - це "константа",
                            тому що її значення неможливо змінити.
                            Тому це і називається літеральними константами.'''
}

data_type_data_in_python = {
    'Числа': {
        'Цілі числа (int)': '''Прикладом може слугувати число 2 ''',

        'Десяткові числа (float)': '''Прикладами десяткових чисел 
                           можуть бути 3.23 або 52.3Е-4. 
                           Позначення Е показує ступінь числа 10 
                           В даному випадку 52.3Е-4 означає
                           52.3*10 в -4 ступені ''',

        'Комплексні': '''Приклади комплексних чисел: 
                      '(-5+4j) та (2.3 - 4.6j)'''
    },
    'Рядки (текст/str)': '''Рядок (текст/string) - це послідовність 
                     символів. Частіше за все, рядки - це 
                     просто деякий набір слів. 
                     Слова можуть бути як на англійській мові, 
                     так і на будь якій іншій мові 
                     який підтримує стандарт Unicode', 
                     що означає, майже на будь якій 
                    мові світу. String незмінний тип даних.'''
}

data_string_syntax = {
    'Робота з текстом (рядками)': {
        'Одинарні лапки': '''Текст (або рядки), можна вказати 
            використовуючи одинарні лапки, наприклад: 
            'Текст в лапках'. Всі пробіли та знаки табуляції зберігаються як є.''',

        'Подвійні лапки': ''' Подвійні лапки працюють так само як і одинарні, 
            наприклад, "Як тебе звати?". ''',

        'Потрійні лапки': ''' Можна вказувати великий текст/рядки з 
            використанням потрійних лапок (""" або \'''). В межах потрійних лапок
            можливо вільно використовувати одинарні чи подвійні лапки.'''
    }
}

data_string_methods = {
    'Методи рядків(str)': {
        # need add pic for example
        'format()': '''Іноді потрібно скласти текст на основі деяких даних.  
        В рядок можуть бути включен визначені позначення, а пісдя може бути викликаний метод format()
         для заміщення цих позначень відповідними аргументами.'''
    }
}

data_variable = {
    'Змінні (variable)': ''' Слово "змінні" говорить само за себе - 
      їх значення може змінюватись, а це означає, що ви можете зберігати в змінній все що завгодно. 
       Змінна - це область пам'яті комп'ютера, в яких ви збергаєте певну інформацію. У відміну від констант, 
        до такої інформації потрібно якимсь чином отримувати доступ. Тому змінним даються імена.\n\n
        Змінні використовуються простим призначенням їм значень. Ніякого попереднього оголошення 
         чи визначення типу данних не потребується та не використовється.''',
    'Імена ідентифікаторів': ''' Ідентифікатори це імена, присвоєні чому небудь для його позначення.\n
       При віборі імен потрібно дотримуватись наступних правил: \n\n
       --> Першим символом ідентифікатора повинна бути буква алфавіта
       (символ ASCII в верхньому або нижньому регістрі, або Unicode),
         а також символ підкреслення("_")\n
       --> Інша частина ідентифікатора може скадатись із букв, підкреслення або цифр\n
       --> Імена ідентифікаторів чутливі до регістру. Наприклад myname та myName - це
        не одне й теж саме.\n
       --> Приклади допутимих імен ідентифікаторів: i, __my_name, name23, та_будь_які_символи_utf8_δξѪђёўЩӆΞέά\n
       --> Приклади не допустимих імен ідентифікаторів: 2things, тут є пробіли, my-name, >a1b2_c3 и "це_в_лапках"
       
         '''
}

data_objects = {
    'Об\'єкти': ''' Python розглядає все що є в программі, як об'єкти. Мається на увазі у загальному сенсі. 
     Замість то щоб говорити "щось", ми говоримо "об'єкт". Python суворо об'єктно орієнтовний в тому сенсі,
         що об'єтом являється все, включаючи числа, рядки(текст) та функції. '''
}

data_logic_and_physical_string = {
    'Фізичний рядок (string)': ''' Фізичний рядок (string) - це те, що ви бачите, коли набираєте програму. 
      Python неявно передбачає, що кожному фізичному рядку відповідає логічний рядок.''',
    'Логічний рядок (string)': ''' Логічний рядок (string) - це те, що Python бачить як 
    єдиний додаток (application). Python неявно передбачає, що кожному фізичному рядку відповідає логічний рядок.'''
}

data_ident = {
    'Відступ': ''' В Python важливі пробіли на початку рядка. Це називається відступом. Передні відступи 
      (пробіли та табуляції) на початку логічного рядка використовуються для визначення рівня відступу 
      логічного рядка, який в свою чергу, використовується для групування додатків (applications).
       Це говорить про те що строки коду повинні мати однаковий відступ. Кожен набір такого коду
       називається блоком.'''
}

data_operator_and_express = {
    'Оператори': {
        'Оператор + (додавання)': ''' Сумує два обєкти. Наприклад: 3 + 5 дає 8; 'a' + 'b' дає 'ab'  ''',

        'Оператор - (віднімання)': ''' Дає різницю двух чисел. Якщо перший операнд відсутній, то він дорівнює нулю.
           Наприклад: -5.2 дає від'ємне число, а 50 - 24 дає 26.''',

        'Оператор * (множення)': ''' Дає похідне двух чисел або повертає рядок (текст) повторену в кількості 
         разів заданим числом. Наприклад:  2 * 3 дає 6. 'la' * 3 дає 'lalala' ''',

        'Оператор ** (зведення в ступінь)': ''' Повертає число х, взведене у ступінь. 
        Наприклад: 3 ** 4 дає 81 (тобто 3 * 3 * 3 * 3)  ''',

        'Оператор / (ділення)': ''' Повертає частку від ділення х на у. Наприклад: 4 / 3 дає 1.3333333333333333.  ''',

        'Оператор // (цілочисельне ділення)': ''' Повертає неповну частку від ділення. 
         Наприклад: 4 // 3 дає 1. -4 // 3 дає -2. ''',

        'Оператор % (ділення по модулю)': '''   ''',

        'Зміщення вліво <<': ''' Зміщує біти числа вліво на задану кількість позицій. 
         (Будь яке число в пам'яті комп'ютера представлено у вигляді бітів або двійкових чисел)
            Приклад: 2 << 2 дає 8. В двійковому вигляді число 2 представляє собою 10. Зрушення вліво на 2 біта 
             дає 1000, що в десятичному вигляді означає 8.''',

        'Зміщення вправо >>': ''' Зрушує біти числа вправо на задану кіькість позицій. Приклад: 
            11 >> 5. В двійковому вигляді 11 представляється як 1011, що будучи зміщенними на 1 біт 
             вправо, дає 101, а це в свою чергу, теж саме що і 5 в десятичному вигляді.''',

        'Побітове І &': ''' Побітова операція і над числами. Наприклад: 5 & 3 дає результат 1.''',

        'Побітова або | ': ''' Побітова операція або над числами. Приклад: 5 | 3 дає 7  ''',

        'Побітове виключно або ^': ''' Побітова операція виключно або. Приклад: 5 ^ 3 дає 7 ''',

        'Побітове ні ~': ''' Побітова операція ні для числа х відповідає -(х+1). Наприклад: ~5 дає -6  ''',

        'Оператор порівняння < (менше)': ''' Перевіряє, чи правильно, що х менше у. Всі оператори порівняння
           повертають True або False. Зверніть увагу на велику букву на початку в цих словах.
            Приклад: 5 < 3 поверне False, а 3 < 5 дає True. Можна робити подібні порівняння: 3 < 5 < 7 дає True ''',

        'Оператор порівняння > (більше)': ''' Перевіряє, чи правильно, що х більше у. Наприклад: 
           5 > 3 поверне True. Якщо обидва операнда - числа, то перед порівнянням вони обидва перетворються
            до однакового типу. В іншому випадку завжди повертається False.''',

        'Оператор <= (менше або дорівнює)': ''' Перевіряє, чи правиьно, що х більше або дорівнює у. 
          Наприклад: x = 3; y = 6; x <= y повертає True.''',

        'Оператор >= (більше або дорівнює)': ''' Перевіряє, чи правильно, що х більше або дорівнює у.
          Наприклад: x = 4; y = 3; x >= 3 повертає True.''',

        'Оператор == (дорівнює)': ''' Перевіряє чи однакові об'єкти. Наприклад: x = 2; y = 2; x == y повертає True. 
        x = 'str'; y = 'stR'; x == y поверне False. x = 'str'; y = 'str'; x == y поверне True.  ''',

        'Оператор != (не дорівнює)': ''' Перевіряє, чи правильно, що об'єкти не однакові. 
         Наприклад: x = 2; y = 3; x != y даёт True.''',

        'Оператор not (логічне ні)': ''' Якщо х дорівнює True, оператор поверне False. Якщо ж х буде False,
          отримаємо True.  ''',

        'Оператор and (логічне і)': ''' x and y дають False, якщо ж x дорівнює False , 
         в іншому випадку повертає значення y. Наприклад: x = False; y = True; x and y повертає False,
          оскільки x дорівнює False. В такому випадку Python не буде перевіряти значення у, так як вже знає,
              що ліва частина виразу "and" прирівнюється False, що передбачає, що і весь вираз в цілому 
               буде дорівнювати False, незалежно від значень всіх інших операндів. 
                Це називається скороченою оцінкою булевих (логічних) виразів. ''',

        'Оператор or (логічне або)': ''' Якщо х дорівнює True, в результаті ми отримаємо False, 
         в іншому випадку отримаємо значення у. Наприклад: x = True; y = False; x or y поверне True. 
         Тут також може проводитись скорочена оцінка булевих виразів.   ''',

    },
    'Вирази': {

    }
}